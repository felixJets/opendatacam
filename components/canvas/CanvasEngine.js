import React, { PureComponent } from 'react'
import { connect } from 'react-redux'
import raf from 'raf'
import { CANVAS_RENDERING_MODE } from '../../utils/constants'

import LiveViewEngine from './engines/LiveViewEngine'
import PathViewEngine from './engines/PathViewEngine';

import simpleheat from './engines/simpleheat';
import { scaleDetection } from '../../utils/resolution';

// import GameEngineStateManager from '../../../statemanagement/app/GameEngineStateManager'

class CanvasEngine extends PureComponent {
  constructor (props) {
    super(props)
    this.lastFrameDrawn = -1

    this.loopUpdateCanvas = this.loopUpdateCanvas.bind(this)
    this.clearCanvas = this.clearCanvas.bind(this)
    this.rafHandle = null;

    this.PathViewEngine = new PathViewEngine();
    this.HeatMapEngine = null;

    this.staticHeatmap = [[322,336.7,0.1],[708,221.075,0.1],[926,583.675,0.1],[1010,246.05,0.1],[323,337.625,0.1],[641,235.875,0.1],[707,220.15,0.1],[925,582.75,0.1],[325,337.625,0.1],[336,194.25,0.1],[535,184.075,0.1],[645,234.95,0.1],[706,219.225,0.1],[924,582.75,0.1],[326,338.55,0.1],[336,195.175,0.1],[648,233.1,0.1],[706,218.3,0.1],[922,581.825,0.1],[327,339.475,0.1],[335,195.175,0.1],[531,182.225,0.1],[652,231.25,0.1],[705,217.375,0.1],[921,581.825,0.1],[335,195.175,0.1],[531,182.225,0.1],[656,230.325,0.1],[335,196.1,0.1],[532,182.225,0.1],[532,182.225,0.1],[1085,595.7,0.1],[533,182.225,0.1],[1119,596.625,0.1],[1152,597.55,0.1],[838,227.55,0.1],[370,594.775,0.1],[1186,598.475,0.1],[838,227.55,0.1],[991,314.5,0.1],[847,655.825,0.1],[837,228.475,0.1],[940,293.225,0.1],[988,313.575,0.1],[853,658.6,0.1],[410,603.1,0.1],[837,228.475,0.1],[935,296,0.1],[984,313.575,0.1],[859,662.3,0.1],[412,605.875,0.1],[930,299.7,0.1],[981,312.65,0.1],[865,666,0.1],[926,302.475,0.1],[977,312.65,0.1],[871,668.775,0.1],[838,228.475,0.1],[921,306.175,0.1],[837,229.4,0.1],[836,229.4,0.1],[836,229.4,0.1],[835,230.325,0.1],[411,639.175,0.1],[413,641.95,0.1],[416,658.6,0.1],[419,662.3,0.1],[421,666,0.1],[424,670.625,0.1],[427,674.325,0.1],[340,193.325,0.1],[340,193.325,0.1],[617,233.1,0.1],[339,192.4,0.1],[615,234.025,0.1],[339,192.4,0.1],[613,234.025,0.1],[833,269.175,0.1],[833,267.325,0.1],[344,194.25,0.1],[833,266.4,0.1],[344,194.25,0.1],[833,264.55,0.1],[344,194.25,0.1],[617,230.325,0.1],[833,263.625,0.1],[344,194.25,0.1],[617,230.325,0.1],[344,194.25,0.1],[446,185,0.1],[446,185.925,0.1],[446,185.925,0.1],[774,656.75,0.1],[781,660.45,0.1],[612,264.55,0.1],[787,664.15,0.1],[609,263.625,0.1],[793,667.85,0.1],[606,262.7,0.1],[800,671.55,0.1],[603,261.775,0.1],[600,260.85,0.1],[612,246.05,0.1],[612,246.975,0.1],[612,247.9,0.1],[612,248.825,0.1],[827,237.725,0.1],[612,248.825,0.1],[827,238.65,0.1],[826,238.65,0.1],[697,308.95,0.1],[826,239.575,0.1],[693,308.025,0.1],[826,240.5,0.1],[689,307.1,0.1],[734,244.2,0.1],[685,306.175,0.1],[737,244.2,0.1],[680,305.25,0.1],[739,245.125,0.1],[742,245.125,0.1],[533,179.45,0.1],[745,246.05,0.1],[533,178.525,0.1],[532,178.525,0.1],[347,190.55,0.1],[532,177.6,0.1],[348,190.55,0.1],[531,177.6,0.1],[349,190.55,0.1],[350,190.55,0.1],[845,232.175,0.1],[845,231.25,0.1],[845,231.25,0.1],[846,230.325,0.1],[656,261.775,0.1],[899,274.725,0.1],[347,191.475,0.1],[654,259,0.1],[896,273.8,0.1],[348,191.475,0.1],[850,235.875,0.1],[652,256.225,0.1],[893,271.95,0.1],[348,191.475,0.1],[650,253.45,0.1],[891,271.025,0.1],[348,191.475,0.1],[854,240.5,0.1],[647,250.675,0.1],[888,270.1,0.1],[349,191.475,0.1],[242,189.625,0.1],[242,189.625,0.1],[849,241.425,0.1],[242,189.625,0.1],[242,190.55,0.1],[242,190.55,0.1],[731,595.7,0.1],[1097,345.025,0.1],[480,541.125,0.1],[1089,343.175,0.1],[483,544.825,0.1],[1082,340.4,0.1],[346,191.475,0.1],[486,548.525,0.1],[1074,338.55,0.1],[243,187.775,0.1],[762,654.9,0.1],[489,552.225,0.1],[1067,336.7,0.1],[768,659.525,0.1],[491,556.85,0.1],[775,663.225,0.1],[781,667.85,0.1],[237,190.55,0.1],[787,671.55,0.1],[349,192.4,0.1],[237,191.475,0.1],[362,270.1,0.1],[699,277.5,0.1],[349,192.4,0.1],[236,192.4,0.1],[362,270.1,0.1],[696,276.575,0.1],[349,192.4,0.1],[236,192.4,0.1],[362,270.1,0.1],[692,276.575,0.1],[349,192.4,0.1],[235,193.325,0.1],[918,317.275,0.1],[617,629,0.1],[432,278.425,0.1],[827,231.25,0.1],[349,192.4,0.1],[234,193.325,0.1],[923,316.35,0.1],[433,278.425,0.1],[826,230.325,0.1],[433,278.425,0.1],[826,230.325,0.1],[434,278.425,0.1],[825,230.325,0.1],[434,279.35,0.1],[824,229.4,0.1],[1000,364.45,0.1],[675,662.3,0.1],[990,361.675,0.1],[684,666,0.1],[980,357.975,0.1],[693,669.7,0.1],[970,355.2,0.1],[702,673.4,0.1],[666,261.775,0.1],[960,352.425,0.1],[712,678.025,0.1],[664,260.85,0.1],[662,259.925,0.1],[832,233.1,0.1],[660,259,0.1],[832,233.1,0.1],[657,258.075,0.1],[832,234.025,0.1],[832,234.025,0.1],[832,234.025,0.1],[711,238.65,0.1],[352,190.55,0.1],[352,190.55,0.1],[896,283.975,0.1],[893,283.975,0.1],[891,283.05,0.1],[1049,625.3,0.1],[888,283.05,0.1],[718,280.275,0.1],[1059,629,0.1],[839,365.375,0.1],[885,282.125,0.1],[715,280.275,0.1],[1068,631.775,0.1],[831,362.6,0.1],[713,279.35,0.1],[1077,635.475,0.1],[823,358.9,0.1],[711,279.35,0.1],[1087,639.175,0.1],[815,356.125,0.1],[709,279.35,0.1],[808,353.35,0.1],[239,188.7,0.1],[240,188.7,0.1],[240,188.7,0.1],[240,188.7,0.1],[168,225.7,0.1],[441,189.625,0.1],[645,239.575,0.1],[241,188.7,0.1],[168,224.775,0.1],[167,223.85,0.1],[442,186.85,0.1],[353,192.4,0.1],[549,192.4,0.1],[167,222.925,0.1],[353,192.4,0.1],[550,192.4,0.1],[167,222,0.1],[835,239.575,0.1],[353,192.4,0.1],[446,186.85,0.1],[353,192.4,0.1],[551,194.25,0.1],[826,245.125,0.1],[445,186.85,0.1],[353,192.4,0.1],[551,195.175,0.1],[825,246.05,0.1],[677,607.725,0.1],[552,196.1,0.1],[824,246.975,0.1],[553,196.1,0.1],[822,247.9,0.1],[795,271.95,0.1],[821,248.825,0.1],[447,188.7,0.1],[792,271.95,0.1],[547,192.4,0.1],[167,229.4,0.1],[447,188.7,0.1],[790,271.95,0.1],[547,193.325,0.1],[787,272.875,0.1],[547,193.325,0.1],[785,272.875,0.1],[547,193.325,0.1],[547,193.325,0.1],[166,230.325,0.1],[166,230.325,0.1],[166,231.25,0.1],[732,666,0.1],[738,670.625,0.1],[166,233.1,0.1],[744,675.25,0.1],[165,233.1,0.1],[750,679.875,0.1],[165,234.025,0.1],[446,187.775,0.1],[756,683.575,0.1],[165,234.95,0.1],[165,234.95,0.1],[696,311.725,0.1],[444,185.925,0.1],[693,311.725,0.1],[444,185.925,0.1],[689,311.725,0.1],[444,185.925,0.1],[686,310.8,0.1],[1042,600.325,0.1],[444,185,0.1],[682,310.8,0.1],[1056,604.95,0.1],[444,185,0.1],[1038,605.875,0.1],[541,269.175,0.1],[1049,608.65,0.1],[543,268.25,0.1],[544,267.325,0.1],[1275,548.525,0.1],[545,266.4,0.1],[546,265.475,0.1],[163,232.175,0.1],[443,189.625,0.1],[162,232.175,0.1],[444,188.7,0.1],[161,232.175,0.1],[444,188.7,0.1],[160,232.175,0.1],[445,187.775,0.1],[258,232.175,0.1],[697,243.275,0.1],[159,233.1,0.1],[445,187.775,0.1],[259,232.175,0.1],[259,232.175,0.1],[796,271.025,0.1],[259,232.175,0.1],[792,270.1,0.1],[704,242.35,0.1],[787,269.175,0.1],[703,241.425,0.1],[783,267.325,0.1],[703,241.425,0.1],[624,262.7,0.1],[779,266.4,0.1],[702,241.425,0.1],[622,261.775,0.1],[701,240.5,0.1],[620,260.85,0.1],[617,260.85,0.1],[615,259.925,0.1],[231,190.55,0.1],[229,189.625,0.1],[166,230.325,0.1],[166,230.325,0.1],[165,230.325,0.1],[165,230.325,0.1],[164,230.325,0.1],[756,604.025,0.1],[343,191.475,0.1],[762,629,0.1],[767,637.325,0.1],[772,641.025,0.1],[776,644.725,0.1],[336,195.175,0.1],[780,648.425,0.1],[245,195.175,0.1],[335,196.1,0.1],[444,192.4,0.1],[785,652.125,0.1],[245,195.175,0.1],[335,196.1,0.1],[444,193.325,0.1],[246,195.175,0.1],[334,197.025,0.1],[444,193.325,0.1],[247,196.1,0.1],[333,197.025,0.1],[444,193.325,0.1],[248,196.1,0.1],[344,195.175,0.1],[344,195.175,0.1],[443,192.4,0.1],[344,196.1,0.1],[441,191.475,0.1],[441,191.475,0.1],[345,191.475,0.1],[441,191.475,0.1],[440,191.475,0.1],[440,191.475,0.1],[707,227.55,0.1],[345,193.325,0.1],[410,633.625,0.1],[708,227.55,0.1],[345,193.325,0.1],[412,637.325,0.1],[708,226.625,0.1],[346,193.325,0.1],[415,641.025,0.1],[708,226.625,0.1],[346,192.4,0.1],[417,643.8,0.1],[708,225.7,0.1],[347,192.4,0.1],[842,226.625,0.1],[419,647.5,0.1],[843,227.55,0.1],[843,227.55,0.1],[844,227.55,0.1],[844,227.55,0.1],[844,227.55,0.1],[347,193.325,0.1],[348,193.325,0.1],[348,193.325,0.1],[349,193.325,0.1],[1055,627.15,0.1],[350,193.325,0.1],[1061,635.475,0.1],[1073,640.1,0.1],[1084,645.65,0.1],[249,228.475,0.1],[1096,650.275,0.1],[177,229.4,0.1],[1108,654.9,0.1],[178,230.325,0.1],[173,231.25,0.1],[252,226.625,0.1],[173,231.25,0.1],[252,226.625,0.1],[172,232.175,0.1],[336,193.325,0.1],[447,189.625,0.1],[253,226.625,0.1],[172,233.1,0.1],[336,193.325,0.1],[447,188.7,0.1],[253,226.625,0.1],[172,233.1,0.1],[336,193.325,0.1],[253,226.625,0.1],[336,192.4,0.1],[444,191.475,0.1],[336,192.4,0.1],[444,191.475,0.1],[556,221.075,0.1],[342,194.25,0.1],[440,188.7,0.1],[557,221.075,0.1],[558,221.075,0.1],[559,221.075,0.1],[661,272.875,0.1],[560,221.075,0.1],[664,272.875,0.1],[666,273.8,0.1],[755,588.3,0.1],[669,273.8,0.1],[760,589.225,0.1],[344,194.25,0.1],[672,273.8,0.1],[766,590.15,0.1],[771,590.15,0.1],[346,193.325,0.1],[776,591.075,0.1],[347,193.325,0.1],[347,192.4,0.1],[348,192.4,0.1],[907,280.275,0.1],[348,192.4,0.1],[911,280.275,0.1],[914,281.2,0.1],[825,658.6,0.1],[343,194.25,0.1],[918,281.2,0.1],[828,661.375,0.1],[344,194.25,0.1],[922,281.2,0.1],[832,665.075,0.1],[344,194.25,0.1],[835,667.85,0.1],[344,194.25,0.1],[839,670.625,0.1],[344,194.25,0.1],[163,243.275,0.1],[612,272.875,0.1],[148,272.875,0.1],[147,275.65,0.1],[145,277.5,0.1],[144,279.35,0.1],[611,239.575,0.1],[142,282.125,0.1],[612,237.725,0.1],[727,282.125,0.1],[612,235.875,0.1],[725,280.275,0.1],[612,234.025,0.1],[351,280.275,0.1],[723,277.5,0.1],[612,232.175,0.1],[351,280.275,0.1],[720,275.65,0.1],[718,272.875,0.1],[448,190.55,0.1],[533,191.475,0.1],[449,190.55,0.1],[532,191.475,0.1],[1038,608.65,0.1],[449,190.55,0.1],[531,191.475,0.1],[1050,612.35,0.1],[449,190.55,0.1],[530,191.475,0.1],[1061,616.05,0.1],[449,190.55,0.1],[530,191.475,0.1],[1191,325.6,0.1],[1073,619.75,0.1],[1084,623.45,0.1],[1157,374.625,0.1],[1153,377.4,0.1],[445,191.475,0.1],[410,664.15,0.1],[412,668.775,0.1],[441,192.4,0.1],[414,673.4,0.1],[440,192.4,0.1],[278,338.55,0.1],[417,677.1,0.1],[278,340.4,0.1],[419,681.725,0.1],[442,188.7,0.1],[278,341.325,0.1],[441,188.7,0.1],[278,343.175,0.1],[278,344.1,0.1],[1184,426.425,0.1],[448,189.625,0.1],[348,270.1,0.1],[1178,422.725,0.1],[448,189.625,0.1],[1173,419.025,0.1],[448,189.625,0.1],[1167,415.325,0.1],[1161,410.7,0.1],[455,189.625,0.1],[549,386.65,0.1],[456,189.625,0.1],[554,386.65,0.1],[450,190.55,0.1],[451,189.625,0.1],[704,232.175,0.1],[614,364.45,0.1],[704,231.25,0.1],[811,361.675,0.1],[623,363.525,0.1],[704,231.25,0.1],[805,359.825,0.1],[632,362.6,0.1],[704,230.325,0.1],[799,357.05,0.1],[642,361.675,0.1],[704,229.4,0.1],[793,354.275,0.1],[651,359.825,0.1],[787,352.425,0.1],[912,557.775,0.1],[921,563.325,0.1],[929,567.95,0.1],[938,572.575,0.1],[947,578.125,0.1],[766,290.45,0.1],[766,291.375,0.1],[766,292.3,0.1],[442,192.4,0.1],[766,293.225,0.1],[346,195.175,0.1],[766,294.15,0.1],[347,195.175,0.1],[348,195.175,0.1],[349,195.175,0.1],[441,185.925,0.1],[350,195.175,0.1],[440,185.925,0.1],[440,185.925,0.1],[1067,593.85,0.1],[1076,594.775,0.1],[1086,595.7,0.1],[1095,597.55,0.1],[823,279.35,0.1],[341,194.25,0.1],[1105,598.475,0.1],[340,193.325,0.1],[339,193.325,0.1],[436,188.7,0.1],[861,331.15,0.1],[338,193.325,0.1],[863,335.775,0.1],[337,193.325,0.1],[865,340.4,0.1],[867,345.025,0.1],[868,349.65,0.1],[864,364.45,0.1],[1014,320.05,0.1],[855,359.825,0.1],[1011,319.125,0.1],[846,354.275,0.1],[1009,318.2,0.1],[837,349.65,0.1],[1006,317.275,0.1],[828,345.025,0.1],[349,192.4,0.1],[941,313.575,0.1],[350,192.4,0.1],[838,328.375,0.1],[350,192.4,0.1],[831,322.825,0.1],[350,192.4,0.1],[823,317.275,0.1],[350,192.4,0.1]]
  }

  componentDidMount () {
    this.loopUpdateCanvas();
    this.HeatMapEngine = simpleheat(this.canvasEl);
    this.HeatMapEngine.radius(2, 5);
    this.HeatMapEngine.data(this.staticHeatmap).draw();
    console.log('heatmap engine initialized');
  }

  componentDidUpdate(prevProps) {
    if (this.props.canvasResolution !== prevProps.canvasResolution) {
      this.PathViewEngine.resetLastFrameData();
      this.clearCanvas()
    }
  }

  clearCanvas () {
    //console.log('clearCanvas')
    this.canvasContext.clearRect(
      0,
      0,
      this.props.fixedResolution && this.props.fixedResolution.w || this.props.canvasResolution.get('w'),
      this.props.fixedResolution && this.props.fixedResolution.h || this.props.canvasResolution.get('h')
    )
    if(this.props.mode === CANVAS_RENDERING_MODE.PATHVIEW) {
      this.PathViewEngine.resetLastFrameData();
    }
  }

  loopUpdateCanvas () {
    if (this.lastFrameDrawn !== this.props.trackerData.frameIndex) {
      // Clear previous frame
      if(this.props.mode !== CANVAS_RENDERING_MODE.PATHVIEW && this.props.mode !== CANVAS_RENDERING_MODE.HEATMAP) {
        this.clearCanvas();
      }

      /*
        Draw things for this frame
      */

      if(this.props.mode === CANVAS_RENDERING_MODE.LIVEVIEW) {
        LiveViewEngine.drawTrackerData(
          this.canvasContext,
          this.props.trackerData.data,
          this.props.canvasResolution.toJS(),
          this.props.originalResolution
        )
      }

      if(this.props.mode === CANVAS_RENDERING_MODE.COUNTERVIEW) {
        LiveViewEngine.drawTrackerDataCounterEditor(
          this.canvasContext,
          this.props.trackerData.data,
          this.props.countingAreas,
          this.props.canvasResolution.toJS(),
          this.props.originalResolution
        )
      }

      if(this.props.mode === CANVAS_RENDERING_MODE.COUNTERVIEW_RECORDING) {
        LiveViewEngine.drawCountingAreas(
          this.canvasContext,
          this.props.countingAreas,
          this.props.canvasResolution.toJS()
        )
        LiveViewEngine.drawTrackerDataCounterEditor(
          this.canvasContext,
          this.props.trackerData.data,
          this.props.countingAreas,
          this.props.canvasResolution.toJS(),
          this.props.originalResolution
        )
      }

      if(this.props.mode === CANVAS_RENDERING_MODE.COUNTING_AREAS) {
        LiveViewEngine.drawCountingAreas(
          this.canvasContext,
          this.props.countingAreas,
          this.props.canvasResolution.toJS()
        )
      }

      if(this.props.mode === CANVAS_RENDERING_MODE.PATHVIEW) {

        this.PathViewEngine.drawPaths(
          this.canvasContext,
          this.props.trackerData.data,
          this.props.fixedResolution || this.props.canvasResolution.toJS(),
          this.props.originalResolution
        )
      }

      if(this.props.mode === CANVAS_RENDERING_MODE.HEATMAP) {
        const canvasResolution = this.props.fixedResolution || this.props.canvasResolution.toJS();
        const originalResolution = this.props.originalResolution;
        const heatmapData = this.props.trackerAccuracyBuffer
          .flatten(true)
          .toJS()
          .map((trackedItem) => {
            let trackedItemScaled = scaleDetection(
              trackedItem,
              canvasResolution,
              originalResolution
            )
            return [trackedItemScaled.x, trackedItemScaled.y, 0.1]
          })
        if(this.HeatMapEngine) {
          // console.log(JSON.stringify(heatmapData));
          this.HeatMapEngine.data(heatmapData).draw();
        }
      }

      this.lastFrameDrawn = this.props.trackerData.frameIndex;
    }
    this.rafHandle = raf(this.loopUpdateCanvas.bind(this))
  }

  componentWillUnmount() {
    if(this.rafHandle) {
      raf.cancel(this.rafHandle);
    }
  }

  render () {
    return (
      <div className={`canvas-container`}>
        {/* Canvas width and height must
        be set the the yolo detections resolution
        Then it is scaled down to viewport */}
        <canvas
          ref={el => {
            this.canvasEl = el
            if (this.canvasEl) {
              this.canvasContext = el.getContext('2d')
              if (this.props.onDomReady) {
                this.props.onDomReady(this.canvasEl)
              }
              if (this.props.registerClearCanvas) {
                this.props.registerClearCanvas(this.clearCanvas)
              }
            }
          }}
          width={this.props.fixedResolution && this.props.fixedResolution.w || this.props.canvasResolution.get('w')}
          height={this.props.fixedResolution && this.props.fixedResolution.h || this.props.canvasResolution.get('h')}
          className='canvas'
        />
        <style jsx>{`
          .canvas-container {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            pointer-events: none;
            visibility: ${this.props.hidden ? 'hidden' : 'visible'};
          }
          .canvas {
            display: block;
            position: absolute;
            top: 0;
            left: 0;
            z-index: 1;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,${this.props.userSettings.get('dimmerOpacity')});
          }

          {/* @media (min-aspect-ratio: 16/9) {
            .canvas {
              width: 100%;
              height: auto;
            }
          }

          @media (max-aspect-ratio: 16/9) {
            .canvas {
              width: auto;
              height: 100%;
            }
          } */}
        `}</style>
      </div>
    )
  }
}

export default connect(state => {

  return {
    trackerData: state.tracker.get('trackerData').toJS(),
    trackerAccuracyBuffer: state.tracker.get('trackerAccuracyBuffer'),
    originalResolution: state.viewport.get('originalResolution').toJS(),
    canvasResolution: state.viewport.get('canvasResolution'),
    countingAreas: state.counter.get('countingAreas'),
    userSettings: state.usersettings
  }
})(CanvasEngine)
